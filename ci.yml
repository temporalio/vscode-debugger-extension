name: Continuous Integration

on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - "releases/*"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-test:
    strategy:
      fail-fast: true
      matrix:
        node: [14, 16]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            node: 16
            docsTarget: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print build information
        run: "echo head_ref: ${{ github.head_ref }}, ref: ${{ github.ref }}, os: ${{ matrix.os }}, node: ${{ matrix.node }}, docsTarget: ${{ toJson(matrix.docsTarget) }}"
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      # Don't build during install phase since we're going to explicitly build
      - run: npm ci --ignore-scripts
      - run: npm run build
        env:
          BUILD_CORE_RELEASE: true

      # docker-compose
      - name: Checkout docker-compose repo
        uses: actions/checkout@v2
        with:
          repository: temporalio/docker-compose
          path: docker-compose
        if: ${{ startsWith(matrix.os, 'ubuntu') }}

      - name: Start Temporal Server
        run: docker-compose up -d
        working-directory: docker-compose
        if: ${{ startsWith(matrix.os, 'ubuntu') }}

      - name: Wait for Temporal Server
        run: npm run wait-namespace
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      # end:docker-compose

# Run TS linting and ts-prune to find unused code
lint-and-prune:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - uses: actions/setup-node@v1
      with:
        node-version: 16
    # Don't build during install phase since we don't need builds for linting
    - run: npm ci --ignore-scripts
    - run: npm run lint
    - run: npm run lint.prune
